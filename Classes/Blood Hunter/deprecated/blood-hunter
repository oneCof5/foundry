const lastArg = args[args.length - 1];
let tactor;
if (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;
else tactor = game.actors.get(lastArg.actorId);
const target = canvas.tokens.get(lastArg.tokenId)
const DAEItem = lastArg.efData.flags.dae.itemData
let bloodhunter = tactor.items.find(i => i.name === 'Blood Hunter' && i.type === 'class');
let bloodhunterLevels = bloodhunter.data.data.levels || 20;
let riteDice = "d4"; /* Smallest dice size for Bloodhunter*/
if (bloodhunterLevels >= 16) riteDice = "d10";
else if (bloodhunterLevels >= 11) riteDice = "d8";
else if (bloodhunterLevels >= 5) riteDice = "d6";
console.log(riteDice);
console.log(args[0]);
let weapons = tactor.items.filter(i => i.data.type === `weapon`);
var weapon_content = ``, bonus = 1;
/*var weapon_content = ``, bonus = ``;
*/
/**if (DAEItem.data.level >= 7) bonus = 3;
else if (DAEItem.data.level < 7) bonus = 2;
else if (DAEItem.data.level < 4) bonus = 1;
*/
for (let weapon of weapons) {
  weapon_content += `<label class="
radio-label">
  <input type="radio" name="weapon" value="${weapon.id}">
  <img src="${weapon.img}" style="border:0px; width: 50px; height:50px;">
  ${weapon.data.name}
</label>`;
}
/**
 * Updates selected weapon with selected element damage
 */
if (args[0] === "on") {
  new Dialog({
    title: 'Choose your rite and weapon to invoke it upon',
    content: `
    <style>
    .magicWeapon .form-group {
        display: flex;
        flex-wrap: wrap;
        width: 100%;
        align-items: flex-start;
      }

      .magicWeapon .radio-label {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        justify-items: center;
        flex: 1 0 25%;
        line-height: normal;
      }

      .magicWeapon .radio-label input {
        display: none;
      }

      .magicWeapon img {
        border: 0px;
        width: 50px;
        height: 50px;
        flex: 0 0 50px;
        cursor: pointer;
      }

      /* CHECKED STYLES */
      .magicWeapon [type=radio]:checked + img {
        outline: 2px solid #f00;
      }
    </style>
    <form class="magicWeapon">
      <div class="form-group" id="weapons">
       ${weapon_content}
       </div>
    </form>
    <form>
      <select id="element">
        <option value="fire">Rite of the Flame</option>
        <option value="cold">Rite of the Frozen</option>
        <option value="lightning">Rite of the Storm</option>
        <option value="necrotic">Rite of the Dead</option>
        <option value="psychic">Rite of the Oracle</option>
        <option value="thunder">Rite of the Roar</option>
      </select>
    </form>
  `,
    buttons: {
      yes: {
        icon: '<i class="fas fa-check"></i>',
        label: 'Yes',
        callback: async (html) => {
          let weaponId = $("input[type='radio'][name='weapon']:checked").val();
          let element = html.find('#element').val();
          /* Edit the dmg dice here according to bloodhunter levels */
          let dmgDice = (bonus + riteDice);
          let weapon = tactor.items.get(weaponId);
          console.log("DEBUG | BELOW THIS IS THE WEAPON YOU PICKED");
          console.log(weapon.data.name);

          /* Uncomment this below if you are an order of the lycan */
          /* if (weapon.data.name == "Predatory Strike") {
          console.log("DEBUG | you did get into the parenthesis!")
          await actor.items.getName("Predatory Strike").update({"data.properties.mgc":true})
          };*/
          let copyWeapon = duplicate(weapon);
          let damageDice = copyWeapon.data.damage.parts
          damageDice.push([dmgDice, element])
          tactor.updateEmbeddedEntity("Item", copyWeapon)
          await DAE.setFlag(tactor, 'elementalWeapon', {
            diceNum: dmgDice,
            attack: bonus,
            elementType: element,
            weaponID: weaponId
          })
        }
      },
    },
  }).render(true);
}
if (args[0] === "off"
) {
  let flag = await DAE.getFlag(tactor, 'elementalWeapon')
  let { diceNum, attack, elementType, weaponID } = flag
  let Weapon = tactor.items.get(weaponID);
        if (Weapon.data.name == "
Predatory Strike"
) {
        await actor.items.getName("
Predatory Strike"
).update({"
data.properties.mgc"
:false})

      };
  let copy_item = duplicate(Weapon);
  let weaponDamageParts = copy_item.data.damage.parts;
  for (let i = 0; i < weaponDamageParts.length; i++) {
    if (weaponDamageParts[i][0] === diceNum && weaponDamageParts[i][1] === elementType){
      weaponDamageParts.splice(i, 1)
      tactor.updateEmbeddedEntity("
Item"
, copy_item);
      await DAE.unsetFlag(tactor, `elementalWeapon`);
      return;
    }
  }
}",
"folder": null,
"sort": 0,
